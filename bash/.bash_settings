#!/bin/bash

#
# environment variables
#

export EDITOR=vim

#
# add paths to $PATH
#

if [[ :$PATH: != *:$HOME/bin:* ]]; then
    PATH=$PATH:$HOME/bin
fi

if [[ :$PATH: != *:$HOME/.local/bin:* ]]; then
    PATH=$PATH:$HOME/.local/bin
fi

case $(uname) in
    CYGWIN_NT*)
        if [ -d '/cygdrive/c/Program Files/Wireshark' ]; then
            PATH="$PATH:/cygdrive/c/Program Files/Wireshark"
        fi
        ;;
esac

#
# environment variables just for Microsoft -- these might depend on ~/.local/bin being present in $PATH
#

export DOTNET_CLI_TELEMETRY_OPTOUT=1
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=true

export AZURE_CORE_COLLECT_TELEMETRY=0

#
# git prompt
#
#   dirty  unstaged *  staged +  new #
#   stash $
#   untracked %
#   upstream  behind <  ahead >  diverged <>
#

if [ -f '/usr/share/git/git-prompt.sh' ]; then
    . '/usr/share/git/git-prompt.sh'
else
    __git_ps1() { : ; }
fi

GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWSTASHSTATE=1
GIT_PS1_SHOWUNTRACKEDFILES=1
GIT_PS1_SHOWUPSTREAM="auto"

__exit_code() { [ $2 -ne 0 ] && printf "$1" $2 || true; }

PS1='\[\e[0;32m\]\u@\h \[\e[1;32m\]\W\[\e[1;36m\]$(__git_ps1 " %s")\[\e[1;31m\]$(__exit_code " %d" $?)\[\e[1;33m\] \$\[\e[0m\] '

#
# start ssh-(p)age(a)nt
#

if [ -z "$SSH_AUTH_SOCK" ]; then
    if [ -n "$(type -p ssh-pageant.exe)" ]; then
        eval $(ssh-pageant)
        SSH_PAGEANT_KILL_ON_LOGOUT=1
    elif [ -n "$(type -p ssh-agent.wsl1804)" ]; then
        eval $(ssh-agent.wsl1804)
        export SSH_AGENT_WSL1804_KILL_ON_LOGOUT=$$
    elif [ -n "$(type -p ssh-agent)" ]; then
        eval $(ssh-agent)
        export SSH_AGENT_KILL_ON_LOGOUT=$$
    fi
fi

# set the umask so that not everything gets created 755 / rwxr-xr-x --> thanks, Microsoft!
umask 0022

#
# load fzf completions and keybindings
#

#if [ -f '/usr/local/share/fzf/completion.bash' ]; then
#    echo 1
#    . '/usr/local/share/fzf/completion.bash'
#elif [ -f '/usr/share/fzf/completion.bash' ]; then
#    echo 2
#    . '/usr/share/fzf/completion.bash'
#fi

#if [ -f '/usr/local/share/fzf/key-bindings.bash' ]; then
#    echo 3
#    . '/usr/local/share/fzf/key-bindings.bash'
#elif [ -f '/usr/share/fzf/key-bindings.bash' ]; then
#    echo 4
#    . '/usr/share/fzf/key-bindings.bash'
#fi

#
# print some stats on login

uname -a
uptime

case $(awk '/^ID=/{print $2}' FS='=' /etc/os-release) in
    arch)
        pacman -Qu \
            | awk '{printf "%s  ",$1; x++} END{printf "(%d)\n",x}' \
            | fold -sw $[$(tput cols)-17] \
            | sed '1 s/^/Pacman updates:  /; 2,$ s/^/\t\t /' ;;
esac
